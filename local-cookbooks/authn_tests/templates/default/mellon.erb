<IfModule mod_auth_mellon.c>
	
	###########################################################################
	# Global configuration for mod_auth_mellon. This configuration is shared by
	# every virtual server and location in this instance of apache.
	###########################################################################

	# MellonCacheSize sets the maximum number of sessions which can be active
	# at once. When mod_auth_mellon reaches this limit, it will begin removing
	# the least recently used sessions. The server must be restarted before any
	# changes to this option takes effect.
	# Default: MellonCacheSize 100
	MellonCacheSize 100

	# MellonLockFile is the full path to a file used for synchronizing access
	# to the session data. The path should only be used by one instance of
	# apache at a time. The server must be restarted before any changes to this
	# option takes effect.
	# Default: MellonLockFile "/var/run/mod_auth_mellon.lock"
	MellonLockFile "/var/run/mod_auth_mellon.lock"

	# MellonPostDirectory is the full path of a directory where POST requests
	# are saved during authentication. This directory must writeable by the
	# Apache user. It should not be writeable (or readable) by other users.
	# Default: None
	# Example: MellonPostDirectory "/var/cache/mod_auth_mellon_postdata"

	# MellonPostTTL is the delay in seconds before a saved POST request can
	# be flushed.
	# Default: MellonPostTTL 900 (15 mn)
	MellonPostTTL 900

	# MellonPostSize is the maximum size for saved POST requests
	# Default: MellonPostSize 1073741824 (1 MB)
	MellonPostSize 1073741824

	# MellonPostCount is the maxmimum amount of saved POST requests
	# Default: MellonPostCount 100
	MellonPostCount 100

	###########################################################################
	# End of global configuration for mod_auth_mellon.
	###########################################################################

</IfModule>

### Virtual host configuration

<VirtualHost *:80>
  ServerName <%= node[:server_name] %>
  DocumentRoot <%= node[:docroot] %>

  <Directory <%= node[:docroot] %>>
    Options FollowSymLinks
    AllowOverride None
    Order allow,deny
    Allow from all
  </Directory>



<IfModule mod_auth_mellon.c>
# https://code.google.com/p/modmellon/wiki/GenericSetup
# This is a server-wide configuration that will add information from the Mellon session to all requests.
<Location />

    # Add information from the auth_mellon session to the request.
    MellonEnable "info"

    # Configure the SP metadata
    # This should be the files which were created when creating SP metadata.
    MellonSPPrivateKeyFile /etc/apache2/mellon/urn_mace_feide.no_services_org.example.sp.key

    MellonSPCertFile /etc/apache2/mellon/urn_mace_feide.no_services_org.example.sp.cert
    MellonSPMetadataFile /etc/apache2/mellon/urn_mace_feide.no_services_org.example.sp.xml

    # IdP metadata. This should be the metadata file you got from the IdP.
    MellonIdPMetadataFile /etc/apache2/mellon/idp-metadata.xml

    # The location all endpoints should be located under.
    # It is the URL to this location that is used as the second parameter to the metadata generation script.
    # This path is relative to the root of the web server.
    MellonEndpointPath /mellon


</Location>

	# This defines a directory where mod_auth_mellon should do access control.
<Location /private-user>

	        # These are standard Apache apache configuration directives.
	        # See http://httpd.apache.org/docs/2.2/mod/core.html for information
	        # about them.
	        Require valid-user
	        AuthType "Mellon"


	        # MellonEnable is used to enable auth_mellon on a location.
	        # It has three possible values: "off", "info" and "auth".
	        # They have the following meanings:
	        #   "off":  mod_auth_mellon will not do anything in this location.
	        #           This is the default state.
	        #   "info": If the user is authorized to access the resource, then
	        #           we will populate the environment with information about
	        #           the user. If the user isn't authorized, then we won't
	        #           populate the environment, but we won't deny the user
	        #           access either.
	        #   "auth": We will populate the environment with information about
	        #           the user if he is authorized. If he is authenticated
	        #           (logged in), but not authorized (according to the
	        #           MellonRequire and MellonCond directives, then we will 
	        #           return a 403 Forbidden error. If he isn't authenticated
	        #           then we will redirect him to the login page of the IdP.
	        #
	        # Default: MellonEnable "off"
	        MellonEnable "auth"

	        # MellonDecoder is used to select which decoder mod_auth_mellon
	        # will use when decoding attribute values.
	        # There are two possible values: "none" and "feide". "none" is the
	        # default.
	        # They have the following meanings:
	        #   "none":  mod_auth_mellon will store the attribute as it is
	        #            received from the IdP. This is the default behaviour.
	        #   "feide": *DEPRECATED* Feide used to transmit attributes with a
	        #            special encoding. That is no longer necessary, and
	        #            this decoder should therefore no longer be used.
	        # Default: MellonDecoder "none"
	        MellonDecoder "none"

	        # MellonVariable is used to select the name of the cookie which
	        # mod_auth_mellon should use to remember the session id. If you
	        # want to have different sites running on the same host, then
	        # you will have to choose a different name for the cookie for each
	        # site.
	        # Default: "cookie"
	        MellonVariable "cookie"

	        # MellonSecureCookie enforces the HttpOnly and secure flags
	        # for the mod_mellon cookie
	        # Default: Off
	        MellonSecureCookie On

	        # MellonCookieDomain allows to specify of the cookie which auth_mellon
	        # will set.
	        # Default: the domain for the received request (the Host: header if
	        # present, of the ServerName of the VirtualHost declaration, or if
	        # absent a reverse resolution on the local IP)
	        # MellonCookieDomain example.com

	        # MellonCookiePath is the path of the cookie which auth_mellon will set.
	        # Default: /
	        MellonCookiePath /

	        # MellonUser selects which attribute we should use for the username.
	        # The username is passed on to other apache modules and to the web
	        # page the user visits. NAME_ID is an attribute which we set to
	        # the id we get from the IdP.
	        # Default: MellonUser "NAME_ID"
	        MellonUser "NAME_ID"

	        # MellonIdP selects in which attribute we should dump the remote 
	        # IdP providerId. This is passed to other apache modules and to 
	        # the web pages the user visits.
	        # Default: none
	        # MellonIdP "IDP"

	        # MellonSetEnv configuration directives allows you to map
	        # attribute names received from the IdP to names you choose
	        # yourself. The syntax is 'MellonSetEnv <local name> <IdP name>'.
	        # You can list multiple MellonSetEnv directives.
	        # Default. None set.
	        MellonSetEnv "e-mail" "mail"

	        # If MellonSessionDump is set, then the SAML session will be
	        # available in the MELLON_SESSION environment variable
	        MellonSessionDump Off

	        # If MellonSamlResponseDump is set, then the SAML authentication
	        # response will be available in the MELLON_SAML_RESPONSE environment 
	        # variable
	        MellonSamlResponseDump Off

	        # MellonRequire allows you to limit access to those with specific
	        # attributes. The syntax is
	        # 'MellonRequire <attribute name> <list of valid values>'.
	        # Note that the attribute name is the name we received from the
	        # IdP.
	        #
	        # If you don't list any MellonRequire directives (and any 
	        # MellonCond directives, see below), then any user authenticated 
	        # by the IdP will have access to this service. If you list several 
	        # MellonRequire directives, then all of them will have to match.
	        # If you use multiple MellonRequire directive on the same 
	        # attribute, the last overrides the previous ones.
	        #
	        # Default: None set.
	        MellonRequire "eduPersonAffiliation" "student" "employee"

	        # MellonCond provides the same function as MellonRequire, with
	        # extra functionnality (MellonRequire is retained for backward
	        # compatibility). The syntax is
	        # 'MellonCond <attribute name> <value> [<options>]'
	        #
	        # <value> is an attribute value to match. Unlike with MellonRequire, 
	        # multiples values are not allowed.
	        #
	        # If the [REG] flag is specified (see below), <value> is a regular 
	        # expression. The syntax for backslash escape is the same as in
	        # Apache's <LocationMatch>'s directives. 
	        #
	        # Format strings are substituted into <value> prior evaluation. 
	        # Here are the supported syntaxes:
	        #    %n       With n being a digit between 0 and 9. If [REG,REF] 
	        #             flags (see below) were used in an earlier matching 
	        #             MellonCond, then regular expression back references
	        #             are substituted.
	        #    %{num}   Same as %n, with num being a number that may be 
	        #             greater than 9.
	        #    %{ENV:x} Substitute Apache environement variable x.
	        #    %%       Escape substitution to get a litteral %.
	        #
	        # <options> is an optional, comma-separated list of option
	        # encloseed with brackets. Here is an example: [NOT,NC]
	        # The valid options are:
	        #    OR  If this MellonCond evaluted to false, then the
	        #        next one will be checked. If it evalutes to true,
	        #        then the overall check succeeds.
	        #    NOT This MellonCond evaluates to true if the attribute 
	        #        does not match the value.
	        #    SUB Substring match, evaluates to true if value is
	        #        included in attribute.
	        #    REG Value to check is a regular expression.
	        #    NC  Perform case insensitive match. 
	        #    MAP Attempt to search an attribute with name remapped by
	        #        MellonSetEnv. Fallback to non remapped name if not
	        #        found.
	        #    REF Used with REG, track regular expression back references,
	        #        So that they can be substituted in an upcoming 
	        #        MellonCond directive.
	        #        
	        # It is allowed to have multiple MellonCond on the same 
	        # attribute, and to mix MellonCond and MellonRequire. 
	        # Note that this can create tricky situations, since the OR
	        # option has effect on a following MellonRequire directive.
	        # 
	        # Default: none set
	        # MellonCond "mail" "@example\.net$" [OR,REG]
	        # MellonCond "mail" "@example\.com$" [OR,REG]
	        # MellonCond "uid" "superuser"

	        # MellonEndpointPath selects which directory mod_auth_mellon
	        # should assume contains the SAML 2.0 endpoints. Any request to
	        # this directory will be handled by mod_auth_mellon.
	        #
	        # The path is the full path (from the root of the web server) to
	        # the directory. The directory must be a sub-directory of this
	        # <Location ...>.
	        # Default: MellonEndpointPath "/mellon"
	        MellonEndpointPath "/secret/endpoint"

	        # MellonDefaultLoginPath is the location where one should be
	        # redirected after an IdP-initiated login. Default is "/"
	        # Default: MellonDefaultLoginPath "/"
	        MellonDefaultLoginPath "/"

	        # MellonSessionLength sets the maximum lifetime of a session, in
	        # seconds. The actual lifetime may be shorter, depending on the
	        # conditions received from the IdP. The default length is 86400
	        # seconds, which is one day.
	        # Default: MellonSessionLength 86400
	        MellonSessionLength 86400

	        # MellonNoCookieErrorPage is the full path to a page which
	        # mod_auth_mellon will redirect the user to if he returns from the
	        # IdP without a cookie with a session id.
	        # Note that the user may also get this error if he for some reason
	        # loses the cookie between being redirected to the IdPs login page
	        # and returning from it.
	        # If this option is unset, then mod_auth_mellon will return a
	        # 400 Bad Request error if the cookie is missing.
	        # Default: unset
	        MellonNoCookieErrorPage "https://example.com/no_cookie.html"

	        # MellonSPMetadataFile is the full path to the file containing
	        # the metadata for this service provider.
	        # If mod_auth_mellon was compiled against Lasso version 2.2.2
	        # or higher, this option is optional. Otherwise, it is mandatory.
	        # Default: None set.
	        MellonSPMetadataFile /etc/apache2/mellon/sp-metadata.xml

	        # If you choose to autogenerate metadata, these option 
	        # can be used to fill the <Organization> element. They
	        # all follow the syntax "option [lang] value":
	        # MellonOrganizationName "random-service"
	        # MellonOrganizationDisplayName "en" "Random service"
	        # MellonOrganizationDisplayName "fr" "Service quelconque"
	        # MellonOrganizationURL "http://www.espci.fr"

	        # MellonSPPrivateKeyFile is a .pem file which contains the private
	        # key of the service provider. The .pem-file cannot be encrypted
	        # with a password. If built with lasso-2.2.2 or higher, the
	        # private key only needs to be readable by root, otherwise it has
	        # to be reasbable by the Apache pseudo user.
	        # Default: None set.
	        MellonSPPrivateKeyFile /etc/apache2/mellon/sp-private-key.pem

	        # MellonSPCertFile is a .pem file with the certificate for the
	        # service provider. This directive is optional.
	        # Default: None set.
	        MellonSPCertFile /etc/apache2/mellon/sp-cert.pem

	        # MellonIdPMetadataFile is the full path to the file which contains
	        # metadata for the IdP you are authenticating against. This
	        # directive is required. Mutliple IdP metadata can be configured
	        # by using multiple MellonIdPMetadataFile directives.
	        #
	        # If your lasso library is recent enough (higher than 2.3.5),
	        # then MellonIdPMetadataFile will accept an XML file containing
	        # descriptors for multiple IdP. An optional validating chain can
	        # be supplied as a second argument to MellonIdPMetadataFile. If
	        # ommitted, no metadata validation will take place.
	        #
	        # Default: None set.
	        MellonIdPMetadataFile /etc/apache2/mellon/idp-metadata.xml

	        # MellonIdPMetadataGlob is a glob(3) pattern enabled  alternative 
	        # to MellonIdPMetadataFile. Like MellonIdPMetadataFile it will
	        # accept an optional validating chain if lasso is recent enough.
	        #
	        # Default: None set.
	        #MellonIdPMetadataGlob /etc/apache2/mellon/*-metadata.xml

	        # MellonIdpPublicKeyFile is the full path of the public key of the
	        # IdP. This parameter is optional if the public key is embedded
	        # in the IdP's metadata file, or if a certificate authority is
	        # used. This parameter cannot be used if multiple IdP are configured.
	        # Default: None set.
	        MellonIdPPublicKeyFile /etc/apache2/mellon/idp-public-key.pem

	        # MellonIdPCAFile is the full path to the certificate of the
	        # certificate authority. This can be used instead of an
	        # certificate for the IdP.
	        # Default: None set.
	        MellonIdPCAFile /etc/apache2/mellon/ca.pem

	        # MellonIdPIgnore lists IdP entityId that should not loaded
	        # from XML federation metadata files. This is usefull if an
	        # IdP cause bugs. Multiple entityId may be specified through
	        # single MellonIdPIgnore, and multiple MellonIdPIgnore are allowed.
	        # Default: None set.
	        #MellonIdPIgnore "https://bug.example.net/saml/idp"

	        # MellonDiscoveryURL is the URL for IdP discovery service. 
	        # This is used for selecting among multiple configured IdP.
	        # On initiali user authentication, it is redirected to the 
	        # IdP discovery URL, with the following arguments set:
	        #
	        #   entityID         SP providerID URL, where our metadata 
	        #                    are pubblished.
	        #   retueniDParam    Argument that IdP discovery must send back.
	        #   return           Return URL the IdP discovery should return to.
	        #
	        # The IdP discovery must redirect the user to the return URL, 
	        # with retueniDParam set to the selected IdP providerID.
	        # 
	        # The builtin:get-metadata discovery URL is not supported anymore
	        # starting with 0.3.1. See MellonProbeDiscoveryTimeout for
	        # a replacement.
	        #
	        # Default: None set.
	        MellonDiscoveryURL "http://www.example.net/idp-discovery"

	        # MellonProbeDiscoveryTimeout sets the timeout of the
	        # IdP probe discovery service, which is available on the
	        # probeDisco endoint.
	        #
	        # This will cause the SP to send HTTP GET requests on the 
	        # configured IdP PorviderID URL. Theses URL should be used to
	        # publish metadata, though this is not mandatory. If the IdP
	        # returns an HTTP status 200, then the IdP is selected. 
	        # If the PorviderID URL requires SSL, MellonIdPCAFile is used
	        # as a trusted CA bundle.
	        #
	        # Default: unset, which means the feature is disabled
	        # MellonProbeDiscoveryTimeout 1

	        # MellonProbeDiscoveryIdP can be used to restrict the 
	        # list of IdP queried by the IdP probe discovery service.
	        #
	        # Default unset, which means that all configured IdP are 
	        # queried.
	        # MellonProbeDiscoveryIdP http://idp1.example.com/saml/metadata
	        # MellonProbeDiscoveryIdP http://idp2.example.net/saml/metadata

	        # This option will make the SAML authentication assertion 
	        # available in the MELLON_SAML_RESPONSE environement 
	        # variable. This assertion holds a verifiable signature
	        # that can be checked again. Default is Off.
	        MellonSamlResponseDump Off

	        # This option will make the Lasso session available in 
	        # the MELLON_SESSION environement variable. Default is Off.
	        MellonSessionDump Off

	        # This option will request specific authentication security-level
	        # through the AuthnContextClassRef element of the AuthnRequest It will
	        # also request enforcement of this level when receiving an
	        # authenticating Assertion.
	        # If the assertion does not have the required security level, an HTTP
	        # Forbidden status code is returned to the browser.
	        # MellonAuthnContextClassRef "urn:oasis:names:tc:SAML:2.0:ac:classes:Kerberos"
	        # MellonAuthnContextClassRef "urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport"
	        # MellonAuthnContextClassRef "urn:oasis:names:tc:SAML:2.0:ac:classes:SoftwarePKI"

	        # MellonSubjectConfirmationDataAddressCheck is used to control
	        # the checking of client IP address against the address returned by the
	        # IdP in Address attribute of the SubjectConfirmationData node. Can be useful if your SP is
	        # behind a reverse proxy or any kind of strange network topology making IP address of client
	        # different for the IdP and the SP. Default is on.
	        # MellonSubjectConfirmationDataAddressCheck On

	        # Does not check signature on logout messages exchanges with idp1
	        # MellonDoNotVerifyLogoutSignature http://idp1.example.com/saml/metadata

	        # Whether to enable replay of POST requests after authentication. When this option is
	        # enabled, POST requests that trigger authentication will be saved until the
	        # authentication is completed, and then replayed. If this option isn't enabled,
	        # the requests will be turned into normal GET requests after authentication.
	        #
	        # Note that if this option is enabled, you must also
	        # set the MellonPostDirectory option in the server configuration.
	        #
	        # The default is that it is "Off".
	        # MellonPostReplay Off


	</Location>

	<Location /private-group>
	# config for group based access
	</Location>


# This is a location that will trigger authentication when requested.
<Location /auth_mellon.php>
    # This location will trigger an authentication request to the IdP.
    MellonEnable "auth"
</Location>
</IfModule> 
# auth_mellon



  LogLevel info

</VirtualHost>